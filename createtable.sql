CREATE TABLE USERS(
	USER_ID NOT NULL NUMBER PRIMARY KEY,
	FIRST_NAME NOT NULL VARCHAR2(100),
	LAST_NAME NOT NULL VARCHAR2(100),
	YEAR_OF_BIRTH INTEGER,
	MONTH_OF_BIRTH INTEGER,
	DAY_OF_BIRTH INTEGER,
	GENDER VARCHAR2(100)
);

CREATE TABLE FRIENDS(
	USER1_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	USER2_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	CONSTRAINT pk_FRIENDS PRIMARY KEY (USER1_ID,USER2_ID), --not sure how to eliminate order
	ON DELETE CASCADE
);

CREATE TABLE CITIES(
	CITY_ID INTEGER NOT NULL PRIMARY KEY,
	CITY_NAME VARCHAR2(100),
	STATE_NAME VARCHAR2(100),
	COUNTRY_NAME VARCHAR2(100)
);

CREATE TABLE USER_CURRENT_CITY(
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID), 
	CURRENT_CITY_ID INTEGER FOREIGN KEY REFERENCES CITIES(CITY_ID),
	CONSTRAINT pk_UCC PRIMARY KEY (USER_ID,CURRENT_CITY_ID),
	ON DELETE CASCADE
);

CREATE TABLE USER_HOMETOWN_CITY: 
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	HOMETOWN_CITY_ID INTEGER FOREIGN KEY REFERENCES CITIES(CITY_ID),
	CONSTRAINT pk_UHC PRIMARY KEY (USER_ID,HOMETOWN_CITY_ID),
	ON DELETE CASCADE
);


CREATE TABLE PROGRAMS(
	PROGRAM_ID INTEGER NOT NULL PRIMARY KEY,
	INSTITUTION VARCHAR2(100),
	CONCENTRATION VARCHAR2(100),
	DEGREE VARCHAR2(100)
);

CREATE TABLE EDUCATION(
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	PROGRAM_ID INTEGER FOREIGN KEY REFERENCES PROGRAMS(PROGRAM_ID),
	PROGRAM_YEAR INTEGER,
	CONSTRAINT pk_edu PRIMARY KEY (USER_ID,PROGRAM_ID),
	ON DELETE CASCADE
);

CREATE TABLE USER_EVENTS(
	EVENT_ID NUMBER NOT NULL PRIMARY KEY,
	EVENT_CREATOR_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	EVENT_NAME VARCHAR2(100) NOT NULL,
	EVENT_TAGLINE VARCHAR2(100),
	EVENT_DESCRIPTION VARCHAR2(100),
	EVENT_HOST VARCHAR2(100) NOT NULL,
	EVENT_TYPE VARCHAR2(100) NOT NULL,-- WHAt is drop down menu
	EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
	EVENT_LOCATION VARCHAR2(100),
	EVENT_CITY_ID INTEGER FOREIGN KEY REFERENCES CITIES(CITY_ID),
	EVENT_START_TIME TIMESTAMP NOT NULL,
	EVENT_END_TIME TIMESTAMP NOT NULL
);

CREATE TABLE PARTICIPANTS(
	EVENT_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USER_EVENTS(EVENT_ID),
	USER_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	CONFIRMATION VARCHAR2(100),
	CONSTRAINT pk_par PRIMARY KEY (EVENT_ID,USER_ID),
);

CREATE TABLE ALBUMS(
	ALBUM_ID VARCHAR2(100) NOT NULL PRIMARY KEY,
	ALBUM_OWNER_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	ALBUM_NAME VARCHAR2(100) NOT NULL,
	ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
	ALBUM_MODIFIED_TIME TIMESTAMP NOT NULL,
	ALBUM_LINK VARCHAR2(2000) NOT NULL,
	ALBUM_VISIBILITY ENUM('EVERYONE', 'FRIENDS_OF_FRIENDS', 'FRIENDS', 'MYSELF', 'CUSTOM' ) NOT NULL, 
	COVER_PHOTO_ID VARCHAR2(100) NOT NULL FOREIGN KEY REFERENCES PHOTOS(PHOTO_ID)
	--IF owner or photo deleted delete?
);

CREATE TABLE PHOTOS(
	PHOTO_ID VARCHAR2(100) NOT NULL PRIMARY KEY,
	ALBUM_ID VARCHAR2(100) NOT NULL FOREIGN KEY REFERENCES ALBUMS(ALBUM_ID),
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
	PHOTO_MODIFIED_TIME TIMESTAMP NOT NULL,
	PHOTO_LINK VARCHAR2(2000) NOT NULL,
	ON DELETE CASCADE  
);

CREATE TABLE TAGS(
	TAG_PHOTO_ID VARCHAR2(100) NOT NULL FOREIGN KEY REFERENCES PHOTOS(PHOTO_ID),
	TAG_SUBJECT_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	TAG_CREATED_TIME TIMESTAMP NOT NULL,
	TAG_X NUMBER NOT NULL,
	TAG_Y NUMBER NOT NULL,
	ON DELETE CASCADE  --CAN we set 1
);

CREATE TABLE MESSAGE(
	MESSAGE_ID INTEGER NOT NULL PRIMARY KEY,
	SENDER_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	RECEIVER_ID NUMBER NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
	MESSAGE_CONTENT VARCHAR2(2000),
	SENT_TIME TIMESTAMP NOT NULL
);



